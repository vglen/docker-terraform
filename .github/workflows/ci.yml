---
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - '*'
env:
  IMAGE_NAME: 'terraform'

name: 'ci'

jobs:
  build_test_scan_docker_image:
    name: 'build-test-scan'
    needs:
      - 'hadolint'
      - 'yamllint'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'setup-go'
        uses: 'actions/setup-go@v1'
        with:
          go-version: 1.14
      - name: 'checkout'
        uses: 'actions/checkout@v2'
      - name: 'github-branch'
        run: |
          echo running on branch ${GITHUB_REF}
      - name: 'github-event'
        run: |
          echo my event was ${GITHUB_EVENT_NAME}
      - name: 'tag-image'
        id: 'vars'
        run: 'echo ::set-env name=TAG::$(cat VERSION.txt)'
        shell: 'bash'
      - name: 'float-tag-image'
        id: 'vars-float'
        run: "echo ::set-env name=FLOAT_TAG::$(cat VERSION.txt|sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/' | awk -F '.' '{print $2}')"
      - name: 'build and tag image'
        id: 'build-tag-image'
        run: |
          docker build --file Dockerfile --tag ${IMAGE_NAME} .
          export IMAGE_FLOAT_TAG="${IMAGE_NAME}:${FLOAT_TAG}"
      - name: 'goss testing'
        env:
          GOSS_VERSION: '0.3.13'
          GOSS_SHA256: 'eb3522ff9682736ff61e2ad114de227de98debcf8a03ca66fcda3917577313e0'
          DGOSS_SHA256: '54da12b39a45242684a492f23842b17351af3fcda537c7f30bf4182acef10c36'
          GOSS_FILES_STRATEGY: 'cp'
          GOSS_SLEEP: 5
          GOSS_RELEASES: 'https://github.com/aelsabbahy/goss/releases/download'
          GOSS_PATH: './goss'
          DGOSS_PATH: './dgoss'
        run: |
          curl -sSL ${GOSS_RELEASES}/v${GOSS_VERSION}/goss-linux-amd64 -o ${GOSS_PATH}
          curl -sSL ${GOSS_RELEASES}/v${GOSS_VERSION}/dgoss -o ${DGOSS_PATH}
          echo "$GOSS_SHA256  ${GOSS_PATH}" | sha256sum -c
          echo "$DGOSS_SHA256  ${DGOSS_PATH}" | sha256sum -c
          chmod +rx ${GOSS_PATH} ${DGOSS_PATH}
          ${DGOSS_PATH} run -it --entrypoint "sh" ${IMAGE_NAME}
      - name: 'scanning'
        uses: 'aquasecurity/trivy-action@0.0.7'
        with:
          image-ref: 'terraform:latest'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: True
          severity: 'CRITICAL,HIGH'

  push_docker_image:
    name: 'push-image'
    needs:
      - 'hadolint'
      - 'yamllint'
      - 'build_test_scan_docker_image'
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'log-into-github-registry'
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin
      - name: 'push-image'
        if: "github.event_name == 'push'"
        id: 'push-image'
        run: |
          docker tag ${IMAGE_FLOAT_TAG} docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${FLOAT_TAG}
          docker push docker.pkg.github.com/${{ github.repository }}/${IMAGE_NAME}:${FLOAT_TAG}

  hadolint:
    name: 'hadolint'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v2'
      - uses: 'burdzwastaken/hadolint-action@master'

  yamllint:
    name: 'yamllint'
    runs-on: 'ubuntu-latest'
    steps:
      - uses: 'actions/checkout@v2'
      - uses: 'ibiqlik/action-yamllint@master'
        with:
          config_file: '.yamllint'
